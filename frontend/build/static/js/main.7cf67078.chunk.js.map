{"version":3,"sources":["timer.js","paretoChart.js","nodatafound.png","App.js","reportWebVitals.js","index.js"],"names":["Timer","state","hours","minutes","seconds","started","clearInterval","this","myInterval","setState","setInterval","props","stop","className","onClick","start","bind","Component","App","data","getdataX","stuff","score","current","cnt","i","length","push","parseInt","getdataY","count","x","y","xbins","size","ybins","type","name","marker","color","line","layout","height","useState","setdata","newdate","setnewdata","stopupdate","setstopupdate","useEffect","fetch","interval","today","Date","getHours","getMinutes","getSeconds","then","response","json","getrankdata","Array","from","rank","keys","map","username","time","val","src","nodata","alt","undefined","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0RAIqBA,E,4MAEjBC,MAAQ,CACJC,MAAO,EACPC,QAAS,EACTC,QAAS,EACTC,SAAS,G,0DAIb,WACIC,cAAcC,KAAKC,c,mBAIvB,WAAS,IAAD,OACJD,KAAKE,SAAS,CAACJ,SAAS,IAExBE,KAAKC,WAAaE,aAAY,WAAO,IAAD,EACI,EAAKT,MAAjCG,EADwB,EACxBA,QAASD,EADe,EACfA,QAASD,EADM,EACNA,MAEtBE,EAAU,GACV,EAAKK,UAAS,kBAAkB,CAC5BL,QADU,EAAGA,QACM,MAGX,IAAZA,IACgB,IAAZD,GACa,IAAVD,IACC,EAAKS,MAAMC,MAAK,GAChBN,cAAc,EAAKE,YACnB,EAAKC,SAAS,CACVP,MAAO,EACPC,QAAS,EACTC,QAAS,KAIjB,EAAKK,UAAS,kBAAc,CACxBP,MADU,EAAEA,MACG,EACfC,QAAS,GACTC,QAAS,QAGb,EAAKK,UAAS,kBAAkB,CAC5BN,QADU,EAAGA,QACM,EACnBC,QAAS,UAItB,O,oBAGP,WAAU,IAAD,EACwCG,KAAKN,MAA1CE,EADH,EACGA,QAASC,EADZ,EACYA,QAASF,EADrB,EACqBA,MAAOG,EAD5B,EAC4BA,QACjC,OACI,gCACI,8BACA,qBAAKQ,UAAW,QAAhB,UAA0BX,EAA1B,IAAkCC,EAAU,GAAV,WAAmBA,GAAYA,EAAjE,IAA2EC,EAAU,GAAV,WAAmBA,GAAYA,OAE5GC,EAAyE,GAA/D,wBAAQS,QAASP,KAAKQ,MAAMC,KAAKT,MAAjC,gC,GA5DWU,a,gBCDpB,SAASC,EAAT,GAAsB,IAARC,EAAO,EAAPA,KACnBC,EAAW,WACb,GAAID,EAAJ,CAOI,IANA,IAAIE,EAAQ,CACRC,MAAO,IAEPC,EAAU,GACVC,EAAM,EAEDC,EAAI,EAAGA,EAAIN,EAAKG,MAAMI,OAAQD,IAE/BN,EAAKG,MAAMG,KAAOF,GACdC,EAAM,GACNH,EAAMC,MAAMK,KAAKC,SAASL,IAE9BA,EAAUJ,EAAKG,MAAMG,GACrBD,EAAM,GAENA,IASZ,OANQA,EAAM,GACNH,EAAMC,MAAMK,KAAKC,SAASL,IAK3BF,EAAMC,QAGXO,EAAW,WACb,GAAIV,EAAJ,CAMI,IALA,IAAIE,EAAQ,CACRS,MAAO,IAEPP,EAAU,GACVC,EAAM,EACDC,EAAI,EAAGA,EAAIN,EAAKG,MAAMI,OAAQD,IAE/BN,EAAKG,MAAMG,KAAOF,GACdC,EAAM,GACNH,EAAMS,MAAMH,KAAKH,GAErBD,EAAUJ,EAAKG,MAAMG,GACrBD,EAAM,GAENA,IASZ,OANQA,EAAM,GACNH,EAAMS,MAAMH,KAAKH,GAKlBH,EAAMS,QAGjB,OACI,gCACI,8BAAK,kDACJX,EAAQ,cAAC,IAAD,CACbA,KAAM,CACJ,CACEY,EAAGX,IACHY,EAAGH,IACHI,MAAO,CAACC,KAAK,IACbC,MAAO,CAACD,KAAM,GACdE,KAAM,YACNC,KAAM,QACNC,OAAQ,CAACC,MAAO,QAElB,CAEER,EAAGX,IACHY,EAAGH,IACHI,MAAO,CAACC,KAAK,IACbC,MAAO,CAACD,KAAM,GACdE,KAAM,OACNI,KAAM,CACJD,MAAO,sBAETF,KAAM,UAIVI,OAAS,CAACC,OAAQ,OACf,6CC1FI,UAA0B,wCCiG1BxB,MArFf,WAAe,MAEWyB,qBAFX,mBAENxB,EAFM,KAEAyB,EAFA,OAGiBD,qBAHjB,mBAGNE,EAHM,KAGGC,EAHH,OAIuBH,oBAAS,GAJhC,mBAINI,EAJM,KAIMC,EAJN,KAOZC,qBAAU,WAERC,MAAM,wGAGL,IAAMC,EAAWzC,aAAY,WAC3B,GAAGqC,EAED,OADAzC,cAAc6C,GACPD,MAAM,8BAGf,IAAIE,EAAQ,IAAIC,KAChBP,EAAWM,EAAME,WAAa,KAAOF,EAAMG,aAAe,GAArB,WAA8BH,EAAMG,cAAiBH,EAAMG,cAAgB,KAAOH,EAAMI,aAAe,GAArB,WAA8BJ,EAAMI,cAAiBJ,EAAMI,eAElLN,MAAM,8BACHO,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAtC,GAAI,OAAIyB,EAAQzB,QAEvB,KAEL,OAAO,kBAAMb,cAAc6C,MAC1B,CAACJ,IAGJ,IAAMa,EAAc,WACjB,GAAGzC,EAaF,OAXU0C,MAAMC,KAAKD,MAAO1C,EAAK4C,KAAKrC,OAAS,GAAK,GAAKP,EAAK4C,KAAKrC,QAASsC,QAG3DC,KAAI,SAACxC,GAAD,OACrB,sBAAKZ,UAAW,kBAAhB,UACE,8BAAMY,EAAI,IACV,8BAAMN,EAAK+C,SAASzC,KACpB,8BAAMN,EAAKG,MAAMG,KACjB,8BAAMN,EAAKgD,KAAK1C,OAJsBA,OAkB5C,OACE,sBAAKZ,UAAU,MAAf,UACE,8BACE,cAAC,EAAD,CAAOD,KAVG,SAACwD,GACZA,GACDpB,GAAc,QAUZ,sBAAKnC,UAAW,MAAhB,UAGI,sBAAKA,UAAW,UAAhB,UACE,6CACA,sBAAKA,UAAW,eAAhB,UACE,sCACA,0CACA,uCACA,oBAAIA,UAAW,SAAf,kBACA,8BAAM+C,IAAgBA,IAAgB,qBAAKS,IAAKC,EAAQC,IAAK,cAC7D,oBAAG1D,UAAW,eAAd,2BAA6CgC,WAKnD,qBAAKhC,UAAW,QAAhB,SACE,cAAC,EAAD,CAAOM,KAAOA,QAAcqD,aC9EzBC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBlB,MAAK,YAAkD,IAA/CmB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.7cf67078.chunk.js","sourcesContent":["\r\nimport React, { Component } from 'react'\r\n\r\n// everything timer related \r\nexport default class Timer extends Component {\r\n    //create stats for timer & hide button state\r\n    state = {\r\n        hours: 2,\r\n        minutes: 0,\r\n        seconds: 0,\r\n        started: false\r\n    }\r\n\r\n    //technically not required but whatever\r\n    componentWillUnmount() {\r\n        clearInterval(this.myInterval)\r\n    }\r\n\r\n    //when button clicked, come here to start timer and hide button\r\n    start() {\r\n        this.setState({started: true})\r\n\r\n        this.myInterval = setInterval(() => {\r\n            const { seconds, minutes, hours } = this.state\r\n\r\n            if (seconds > 0) {\r\n                this.setState(({ seconds }) => ({\r\n                    seconds: seconds - 1\r\n                }))\r\n            }\r\n            if (seconds === 0) {\r\n                if (minutes === 0) {\r\n                    if(hours === 0) {\r\n                        this.props.stop(true)\r\n                        clearInterval(this.myInterval)              \r\n                        this.setState({\r\n                            hours: 0,\r\n                            minutes: 0,\r\n                            seconds: 0\r\n                        })  \r\n                    }\r\n\r\n                    this.setState(({hours}) => ({\r\n                        hours: hours - 1,\r\n                        minutes: 59,\r\n                        seconds: 59\r\n                    }))\r\n                } else {\r\n                    this.setState(({ minutes }) => ({\r\n                        minutes: minutes - 1,\r\n                        seconds: 59\r\n                    }))\r\n                }\r\n            } \r\n        }, 1000)\r\n    }\r\n\r\n    render() {\r\n        const { minutes, seconds, hours, started } = this.state\r\n        return (\r\n            <div>\r\n                <div>\r\n                <h1  className={'timer'}>{hours}:{minutes < 10 ? `0${minutes}` : minutes}:{seconds < 10 ? `0${seconds}` : seconds}</h1>\r\n            </div>\r\n            {!started ? <button onClick={this.start.bind(this)}>Start Timer</button> : \"\"}\r\n            \r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react'\r\nimport Plot from 'react-plotly.js';\r\n\r\nexport default function App({data}) {\r\n    const getdataX = () => {\r\n        if (data) {\r\n            var stuff = {\r\n                score: [],\r\n            }\r\n            var current = '';\r\n            var cnt = 0;\r\n\r\n            for (var i = 0; i < data.score.length; i++) {\r\n\r\n                if (data.score[i] !== current) {\r\n                    if (cnt > 0) {\r\n                        stuff.score.push(parseInt(current))\r\n                    }\r\n                    current = data.score[i];\r\n                    cnt = 1;\r\n                } else {\r\n                    cnt++;\r\n                }\r\n            }\r\n            if (cnt > 0) {\r\n                stuff.score.push(parseInt(current))\r\n            }\r\n        } else {\r\n            return undefined\r\n        }\r\n        return stuff.score\r\n    }\r\n\r\n    const getdataY = () => {\r\n        if (data) {\r\n            var stuff = {\r\n                count: []\r\n            }\r\n            var current = '';\r\n            var cnt = 0;\r\n            for (var i = 0; i < data.score.length; i++) {\r\n\r\n                if (data.score[i] !== current) {\r\n                    if (cnt > 0) {\r\n                        stuff.count.push(cnt)\r\n                    }\r\n                    current = data.score[i];\r\n                    cnt = 1;\r\n                } else {\r\n                    cnt++;\r\n                }\r\n            }\r\n            if (cnt > 0) {\r\n                stuff.count.push(cnt)\r\n            }\r\n        } else {\r\n            return undefined\r\n        }\r\n        return stuff.count\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div><h1>Score by count</h1></div>\r\n            {data ?  <Plot\r\n        data={[\r\n          {\r\n            x: getdataX(),\r\n            y: getdataY(),\r\n            xbins: {size:10},\r\n            ybins: {size: 5},\r\n            type: 'histogram',\r\n            name: 'Score',\r\n            marker: {color: 'red'},\r\n          },\r\n          {\r\n            \r\n            x: getdataX(),\r\n            y: getdataY(),\r\n            xbins: {size:10},\r\n            ybins: {size: 5},\r\n            type: 'line',\r\n            line: {\r\n              color: 'rgb(207, 114, 255)'\r\n            },\r\n            name: 'Score'\r\n        }\r\n        ]}\r\n\r\n        layout={ {height: 500} }\r\n      /> : <div>no data</div>}\r\n        </div>\r\n    );\r\n}","export default __webpack_public_path__ + \"static/media/nodatafound.89eb601b.png\";","import './App.css';\nimport React, { useEffect, useState } from 'react'\n\n//import page\nimport Timer from './timer'\nimport Chart from './paretoChart'\n\n//import img\nimport nodata from './nodatafound.png'\n// require('typeface-lato') <-- might need later but ehh whatever\n\n\nfunction App() {\n  //create states for data and updated on\n  const [data, setdata] = useState()\n  const [newdate, setnewdata] = useState()\n  const [stopupdate, setstopupdate] = useState(false)\n\n  //componentDidMount\n   useEffect(() => {\n     //initialize puppeteer lib browser cos i dun wanna keep closing browser\n     fetch('http://localhost:4000/open?url=https://www.hackerrank.com/contests/kennethcoolcodesprint/leaderboard')\n\n      // get data every 3s, refreshes browser to get updated data\n      const interval = setInterval(() => {    \n        if(stopupdate){\n          clearInterval(interval)\n          return fetch('http://localhost:4000/stop')\n        }   \n\n        var today = new Date()\n        setnewdata(today.getHours() + \":\" + (today.getMinutes() < 10 ? `0${today.getMinutes()}` : today.getMinutes()) + \":\" + (today.getSeconds() < 10 ? `0${today.getSeconds()}` : today.getSeconds()))\n        \n        fetch('http://localhost:4000/data')\n          .then(response => response.json())\n          .then(data => setdata(data)); \n\n      }, 3000);\n\n    return () => clearInterval(interval);\n  }, [stopupdate]);\n\n  //get rank data sort to Divs to display\n  const getrankdata = () => {\n     if(data){\n       //create array with elements [0,1,2,3,4,5,6] <- list goes on until it reaches .length() \n      var arr = Array.from(Array((data.rank.length > 10 ? 10 : data.rank.length)).keys())\n\n      //a way to use for each but in react\n      const rank = arr.map((i)=> \n      <div className={'leaderboard-row'} key={i}>\n        <div>{i + 1}</div>\n        <div>{data.username[i]}</div>\n        <div>{data.score[i]}</div>\n        <div>{data.time[i]}</div>\n      </div>\n      )\n      return rank\n    }\n  }\n\n  const getStop = (val) => {\n    if(val) {\n      setstopupdate(true)\n    }\n  }\n\n  //front end stuff\n  return (\n    <div className=\"App\">\n      <div>\n        <Timer stop={getStop}/>\n      </div>\n        <div className={'row'}>\n\n            {/* leaderboad Table */}\n            <div className={'bigdata'}> \n              <h1>Leaderboard</h1>\n              <div className={'table-header'}>\n                <h2>Rank</h2>\n                <h2>Username</h2>\n                <h2>Score</h2>\n                <h2 className={'lasth2'}>Time</h2>\n                <div>{getrankdata() ? getrankdata() : <img src={nodata} alt={'no data'} />}</div> \n                <p className={'last-updated'}>Last Updated: {newdate}</p>\n              </div>\n            </div>\n\n          {/* chart */}\n          <div className={'chart'}>\n            <Chart data={(data ? data : undefined)}/>\n          </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}